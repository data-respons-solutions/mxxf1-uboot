#ifndef __SPERRE_PINS_H__
#define __SPERRE_PINS_H__

static iomux_v3_cfg_t const uart1_pads[] = {
	MX6_PAD_CSI0_DAT10__UART1_TX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
	MX6_PAD_CSI0_DAT11__UART1_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
};

static iomux_v3_cfg_t const uart2_pads[] = {
	MX6_PAD_EIM_D26__UART2_TX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
	MX6_PAD_EIM_D27__UART2_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
};

static iomux_v3_cfg_t const enet_pads[] = {
	MX6_PAD_ENET_MDC__ENET_MDC			|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_MDIO__ENET_MDIO		|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_CRS_DV__ENET_RX_EN		|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_RX_ER__ENET_RX_ER		|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_TX_EN__ENET_TX_EN		|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_RXD0__ENET_RX_DATA0	|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_RXD1__ENET_RX_DATA1	|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_TXD0__ENET_TX_DATA0	|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_ENET_TXD1__ENET_TX_DATA1	|	MUX_PAD_CTRL(ENET_PAD_CTRL),
	MX6_PAD_GPIO_16__ENET_REF_CLK		|	MUX_PAD_CTRL(ENET_PAD_CTRL),

	/* LAN8720 PHY Reset */
	//MX6_PAD_NANDF_CS1__GPIO6_IO14		|	MUX_PAD_CTRL(NO_PAD_CTRL),	/* RGMII_nRST - GPIO6[14] Output low */
	//MX6_PAD_GPIO_9__GPIO1_IO09			|	MUX_PAD_CTRL(NO_PAD_CTRL),	/* RGMII_INT - GPIO1[9] (high/in) */
};

static iomux_v3_cfg_t const usb_otg_pads[] = {
	MX6_PAD_EIM_D21__USB_OTG_OC		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_ENET_RX_ER__USB_OTG_ID 	|	MUX_PAD_CTRL(REGINP_PAD_CTRL),	/* TODO: make sure about that */
	MX6_PAD_EIM_D22__USB_OTG_PWR	|	MUX_PAD_CTRL(NO_PAD_CTRL),
	//MX6_PAD_EIM_D22__GPIO3_IO22		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* USB_OTG_PWR - GPIO3[22] Output low */ /* NOT SURE ABOUT THIS DEF */
};

static iomux_v3_cfg_t const usb_h1_pads[] = {
	MX6_PAD_EIM_D30__USB_H1_OC	|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_D31__USB_H1_PWR	|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_D31__GPIO3_IO31	|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* USB_H1_PWR - GPIO3[31] Output low */ /* NOT SURE ABOUT THIS DEF */
};

static struct i2c_pads_info i2c_pad_info0 = {
		.scl = {
				.i2c_mode = MX6_PAD_CSI0_DAT9__I2C1_SCL	|	MUX_PAD_CTRL(I2C_PAD_CTRL),
				.gpio_mode = MX6_PAD_CSI0_DAT9__GPIO5_IO27 | MUX_PAD_CTRL(I2C_PAD_CTRL),
				.gp = IMX_GPIO_NR(5, 27)
		},
		.sda = {
			.i2c_mode = MX6_PAD_CSI0_DAT8__I2C1_SDA | MUX_PAD_CTRL(I2C_PAD_CTRL),
			.gpio_mode = MX6_PAD_CSI0_DAT8__GPIO5_IO26 | MUX_PAD_CTRL(I2C_PAD_CTRL),
			.gp = IMX_GPIO_NR(5, 26)
		}
};

static struct i2c_pads_info i2c_pad_info1 = {
		.scl = {
				.i2c_mode = MX6_PAD_KEY_COL3__I2C2_SCL	|	MUX_PAD_CTRL(I2C_PAD_CTRL),
				.gpio_mode = MX6_PAD_KEY_COL3__GPIO4_IO12 | MUX_PAD_CTRL(I2C_PAD_CTRL),
				.gp = IMX_GPIO_NR(4, 12)
		},
		.sda = {
			.i2c_mode = MX6_PAD_KEY_ROW3__I2C2_SDA | MUX_PAD_CTRL(I2C_PAD_CTRL),
			.gpio_mode = MX6_PAD_KEY_ROW3__GPIO4_IO13 | MUX_PAD_CTRL(I2C_PAD_CTRL),
			.gp = IMX_GPIO_NR(4, 13)
		}
};

static struct i2c_pads_info i2c_pad_info2 = {
		.scl = {
				.i2c_mode = MX6_PAD_GPIO_3__I2C3_SCL	|	MUX_PAD_CTRL(I2C_PAD_CTRL),
				.gpio_mode = MX6_PAD_GPIO_3__GPIO1_IO03 | MUX_PAD_CTRL(I2C_PAD_CTRL),
				.gp = IMX_GPIO_NR(1, 3)
		},
		.sda = {
			.i2c_mode = MX6_PAD_GPIO_6__I2C3_SDA | MUX_PAD_CTRL(I2C_PAD_CTRL),
			.gpio_mode = MX6_PAD_GPIO_6__GPIO1_IO06 | MUX_PAD_CTRL(I2C_PAD_CTRL),
			.gp = IMX_GPIO_NR(1, 6)
		}
};

static iomux_v3_cfg_t const i2c_pads[] = {
	MX6_PAD_CSI0_DAT8__I2C1_SDA	| MUX_PAD_CTRL(I2C_PAD_CTRL),
	MX6_PAD_CSI0_DAT9__I2C1_SCL	| MUX_PAD_CTRL(I2C_PAD_CTRL),
	MX6_PAD_KEY_ROW3__I2C2_SDA	| MUX_PAD_CTRL(I2C_PAD_CTRL),
	MX6_PAD_KEY_COL3__I2C2_SCL	| MUX_PAD_CTRL(I2C_PAD_CTRL),
	MX6_PAD_GPIO_6__I2C3_SDA	| MUX_PAD_CTRL(I2C_PAD_CTRL),
	MX6_PAD_GPIO_3__I2C3_SCL	| MUX_PAD_CTRL(I2C_PAD_CTRL),
};

static iomux_v3_cfg_t const ecspi2_pads[] = {
	MX6_PAD_DISP0_DAT19__ECSPI2_SCLK	| MUX_PAD_CTRL(SPI_PAD_CTRL),
	MX6_PAD_DISP0_DAT16__ECSPI2_MOSI	| MUX_PAD_CTRL(SPI_PAD_CTRL),
	MX6_PAD_DISP0_DAT17__ECSPI2_MISO	| MUX_PAD_CTRL(SPI_PAD_CTRL),
	MX6_PAD_DISP0_DAT18__GPIO5_IO12		| MUX_PAD_CTRL(SPI_PAD_CTRL),	/* ECSPI2_SS0 - Use GPIO for CS */
};

static iomux_v3_cfg_t const ecspi3_pads[] = {
	MX6_PAD_DISP0_DAT0__ECSPI3_SCLK | MUX_PAD_CTRL(SPI_PAD_CTRL),
	MX6_PAD_DISP0_DAT1__ECSPI3_MOSI | MUX_PAD_CTRL(SPI_PAD_CTRL),
	MX6_PAD_DISP0_DAT2__ECSPI3_MISO | MUX_PAD_CTRL(SPI_PAD_CTRL),
	MX6_PAD_DISP0_DAT3__GPIO4_IO24	| MUX_PAD_CTRL(SPI_PAD_CTRL),	/* ECSPI3_SS0 - Use GPIO for CS */
};

static iomux_v3_cfg_t const usdhc4_pads[] = {
	MX6_PAD_SD4_CLK__SD4_CLK	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_CMD__SD4_CMD	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT0__SD4_DATA0	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT1__SD4_DATA1 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT2__SD4_DATA2 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT3__SD4_DATA3 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT4__SD4_DATA4 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT5__SD4_DATA5 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT6__SD4_DATA6 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD4_DAT7__SD4_DATA7 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_GPIO_7__GPIO1_IO07	| MUX_PAD_CTRL(USDHC_PAD_CTRL),		/* MMC_RST | GPIO1[07] Output high */
};

static iomux_v3_cfg_t const gpio_pads[] = {
	MX6_PAD_GPIO_0__GPIO1_IO00		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* LCD_PPEN - GPIO1[00] Output low */
	MX6_PAD_KEY_ROW4__GPIO4_IO15	|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* BL_EN | GPIO4[15] Output low */
	MX6_PAD_GPIO_2__GPIO1_IO02		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* GPIO_Debug_LED - GPIO1[02] Output high */
	MX6_PAD_GPIO_4__GPIO1_IO04		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* RTC_IRQ - GPIO1[04] Output high */
	MX6_PAD_GPIO_5__GPIO1_IO05		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* IO_INT - GPIO1[05] Input high */
	MX6_PAD_GPIO_8__GPIO1_IO08		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* IO_RESET - GPIO1[08] Output high */
	MX6_PAD_GPIO_17__GPIO7_IO12		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* TOUCH_RES - GPIO7[12] Output high */
	MX6_PAD_GPIO_1__GPIO1_IO01		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* TOUCH_IRQ - GPIO1[01] Output high */
	MX6_PAD_GPIO_18__GPIO7_IO13		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* PMIC_INT_B - GPIO7[13] Output high */
	//MX6_PAD_EIM_D31__GPIO3_IO31   	|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* PMIC_INT_B - GPIO3[31] Output high */
	MX6_PAD_GPIO_19__GPIO4_IO05		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* RS485_PW - GPIO4[05] Output high */
	//MX6_PAD_GPIO_9__GPIO1_IO09		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* ADS1248_RESET - GPIO1[09] Output high */
	MX6_PAD_GPIO_16__GPIO7_IO11		|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* ADS1248_START - GPIO7[11] Output high */
	MX6_PAD_KEY_COL4__GPIO4_IO14	|	MUX_PAD_CTRL(NO_PAD_CTRL),		/* SPI_NOR_WP - GPIO4[14] Output high */
	//MX6_PAD_SD1_DAT3__GPIO1_IO21	|	MUX_PAD_CTRL(NO_PAD_CTRL),
};

static iomux_v3_cfg_t const eim_pads[] = {
	MX6_PAD_EIM_LBA__EIM_LBA_B		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_RW__EIM_RW			|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A16__EIM_ADDR16		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A17__EIM_ADDR17		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A18__EIM_ADDR18		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A19__EIM_ADDR19		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A20__EIM_ADDR20		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A21__EIM_ADDR21		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A22__EIM_ADDR22		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A23__EIM_ADDR23		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_A24__EIM_ADDR24		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_EB2__EIM_EB2_B		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_EB3__EIM_EB3_B		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_WAIT__EIM_WAIT_B	|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_EB0__EIM_EB0_B		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_EB1__EIM_EB1_B		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA0__EIM_AD00		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA1__EIM_AD01		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA2__EIM_AD02		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA3__EIM_AD03		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA4__EIM_AD04		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA5__EIM_AD05		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA6__EIM_AD06		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA7__EIM_AD07		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA8__EIM_AD08		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA9__EIM_AD09		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA10__EIM_AD10		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA11__EIM_AD11		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA12__EIM_AD12		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA13__EIM_AD13		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA14__EIM_AD14		|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EIM_DA15__EIM_AD15		|	MUX_PAD_CTRL(NO_PAD_CTRL),
};

static iomux_v3_cfg_t const other_pads[] = {
	MX6_PAD_EIM_D29__UART2_RTS_B	|	MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_SD1_DAT3__PWM1_OUT		|	MUX_PAD_CTRL(NO_PAD_CTRL),
};

#endif
